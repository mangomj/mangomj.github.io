<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo图片托管-微博图床]]></title>
    <url>%2F2019%2F03%2F12%2Ftuchuang%2F</url>
    <content type="text"><![CDATA[为什么要使用图床 在使用hexo用md写文章时，能插入点图片当然是最好的，这样显得更生动点，如果将图片全部放到项目的指定文件夹里，利用相对路径来引用的话，项目包日积月累一定会非常地大，因为我买的blog一般是用了github的page服务，这样肯定会造成打开blog会变得非常卡顿。所以最好的办法是使用外链，即用网络连接的方式显示图片，于是图床应运而生。 为什么选择微博 国内有不少的云存储服务，像腾讯微博七牛等等，都是能提供稳定服务的大厂，但是腾讯需要付费，七牛需要实名认证，于是我选择了微博作为我的图床，登录微博然后打开相册，进入了微相册可以新建一个专辑设置为仅私人可见，避免不必要麻烦，然后就可以将本地图片上传至我买的相册专辑了，然后点击图片，点击查看大图，鼠标右键，复制图片连接（如果不查看大图图片是压缩模式，模糊不清），然后就可以在md里进行 src=”连接”来显示了，美滋滋~ &gt;]]></content>
      <categories>
        <category>图片</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[递归函数常见问题]]></title>
    <url>%2F2019%2F03%2F12%2Fdigui%2F</url>
    <content type="text"><![CDATA[什么是递归递归是一个函数不断调用自身的值来求解的一个过程，迭代是在一块代码区里进行自身值的调用 实例 今天看到一个递归的例子，代码如图所示: 求输出结果，其实这是一个很基础的知识点，但是往往容易被我们忽略，图中程序是一个典型的递归函数，其输出结果为fedcba，将字符”abcdef”倒序输出了。或许你会比较奇怪，为什么会出现这样的结果呢？为了方便理解，，我在这个基础上重新写了一个demo来观察其执行原理。如图所示 a初始值为1，在函数A里，每执行一次就增加1，在满足第一个if条件前提下，进行输出a值，并且进行递归，递归之后还有一个if语句进行输出a值，最终执行结果如图所示: 先是顺序的输出2,3…..8，这没什么疑问，因为a+1要&lt;10，所以a最大只能为8，但是最后还逆序输出了8,7…….2。就和第一个例子的输出结果是一样的，都是逆序了。这是因为，递归的设计原理就是利用了栈的特性，先进后出。图中函数A在满足了第一个if之后，紧接着就开始了函数递归，此时是将每一次执行时局部变量值压入栈内，一直到最后不满足递归的条件了，也就是a+1&gt;=10了（a=9）时，递归结束，开始执行递归之后的代码块，而进行弹栈，依次输出a值（递归多少次就执行多少次），因为栈是先进后出，所以最终输出结果是8,7,6,5,4,3,2。相同道理，第一个图中的代码是将指针p指向字符串”abcdef”，也就是一开始指针指向字符串的第一个字符’a’，在函数fun里，t=p++;，因为++的优先级大于,所以相当于是p指针进行了自加（因为p++是执行完之后才变更，而++p是执行前变更），也就是t一开始等于’a’，满足p不等于”\0”之后进入fun函数递归，一直到p等于”\0”之后，结束递归，此间假如写一个输出t的语句，对t的输出应为:abcdef。 结束递归后，开始进行对t是否等于”\0”进行判断，如果不相等，则输出t，因为当*p=”\0”的时候，此时t应该是等于’f’，进行取栈，依次输出”fedcba”。 总之，递归里面含有递归的”先进后出”的特性。 ps:在printf函数里，对变量的计算是从右至左依次计算，计算完就压入栈，最后依次取出输出，所以printf函数也是利用了栈的特性。]]></content>
      <categories>
        <category>递归</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo next开启动态效果]]></title>
    <url>%2F2019%2F03%2F12%2Fhexo_next_cavans%2F</url>
    <content type="text"><![CDATA[介绍Next作为hexo最受欢迎之一的主题，其实也有很多人性化的设置，比如说baidushare和busuanzi，今天要介绍的是cavans动态效果，打开next的_config.yml配置文件 将false改成ture，里面有几个属性，一个是线条一个是球，自己可以慢慢试一下]]></content>
      <categories>
        <category>Next</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[heox部署到码云giitee和无法访问二级目录文件]]></title>
    <url>%2F2019%2F03%2F12%2Fgitee_page%2F</url>
    <content type="text"><![CDATA[为什么要部署到码云上 之前已经说了如何部署自己的hexo项目到github上并且使用github的page服务，但是毕竟github服务器在国外，访问速度肯定是比较慢的了，那么今天就来说说怎么部署自己的hexo项目到码云gitee上。 怎么部署？ 一样的，首先注册一个码云账号，填写你的uername，最后正经一点，作为你的域名。然后像操作github一样，创建一个仓库，注意：如果想让你的hexo blog能用https://username.gitee.io 的方式进行访问，那就必须要求仓库的名字和你的uername一致，否则就只能用二级目录格式的url进行访问，所以建议大家将仓库取名和username一致。完成之后在hexo项目的根目录里打开配置文件_config.yml，如图所示配置好rope然后就可以用hexo clean &amp;&amp;hexo g &amp;&amp; hexo d命令来说呢过程html文件和push代码了，在上传时，我这个肯定是需要输入两次用户名和米密码的，一个是github的，一个是码云的，因为我没有配置ssh免密连接，有兴趣可以去了解一下ssh免密连接。 常见问题 如何创建一个首页访问地址不带二级目录的 pages，如ipvb.gitee.io？ 答：如果你想你的 pages 首页访问地址不带二级目录，如ipvb.gitee.io，你需要建立一个与自己个性地址同名的仓库，如 https://gitee.com/ipvb 这个用户，想要创建一个自己的站点，但不想以子目录的方式访问，想以ipvb.gitee.io直接访问，那么他就可以创建一个名字为ipvb的仓库 https://gitee.com/ipvb/ipvb 部署完成后，就可以以 https://ipvb.gitee.io 进行访问了。 当要部署的项目与自己的个性地址不一致时，部署完成后存在一些资源访问404？ 答：当需要部署的仓库和自己的个性地址不一致时，如：https://gitee.com/ipvb/blog ，生成的pages url 为 https://ipvb.gitee.io/blog ，而访问的资源404，如 https://ipvb.gitee.io/style.css 。这是因为相应配置文件的相对路径存在问题导致的，生成的资源 url 应该为 https://ipvb.gitee.io/blog/style.css 才对。对于不同的静态资源生成器，配置如下： 具体见官网：https://gitee.com/help/articles/4136#article-header0]]></content>
      <categories>
        <category>码云gitee</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[新版win10进pe蓝屏问题]]></title>
    <url>%2F2019%2F03%2F11%2Fwepe%2F</url>
    <content type="text"><![CDATA[笔者是一个装系统老手了，用的最多的就是u盘pe。但是有一次在给一个学弟装系统时发现用u启动和其他启动盘进pe，电脑直接蓝屏，如下图所示尝试多次也没办法，包括什么更改硬盘格式，但有的只有一种格式，根本没办法更改。然后我尝试了wepe的win10pe系统进wepe官网下载wepe win10制作包 然后安装，选择u盘制作，如图所示 选择制作的u盘和安装方式以及其他设置 然后等安装 完成 插入u盘，重启电脑，长按esc或f12键进启动项，选择u盘，就ok了罗列常见电脑型号对应的启动项键]]></content>
      <categories>
        <category>启动盘||BIOS</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[关于pr安装失败]]></title>
    <url>%2F2019%2F03%2F11%2Fpr_delete%2F</url>
    <content type="text"><![CDATA[在安装pr的时候总是有许多的问题，这很正常。话不多说，首先拿到安装包后我们先断开网络连接，避免要登录adobe账号，再打开我的电脑，进c盘如图所示的文件目录下，删除里面的几个文件，然后选好安装的位置，开始安装。然后就可以使用了。]]></content>
      <categories>
        <category>PR</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo备份环境文件时主题文件夹不能备份]]></title>
    <url>%2F2019%2F03%2F11%2Fhexo_next_error%2F</url>
    <content type="text"><![CDATA[hexo在部署的时候是将md文件转换成html文件，clean public等文件之后上传的web项目。这样对hexo的blog迁移十分不友好，所以最好能把hexo环境文件也push到github上我暂时没有找到一个很好的方法能做这两项工作的方法，于是我新建了一个repository用来放置hexo的环境文件，但是当我push的时候发现，themes下的next主题文件夹丢失，不能push上来百度了一下如图 但是试了一下发现依然丢失，最后没办法只能把整个要备份的仓库压缩上传了，不过有些麻烦，还在学习当中，有进展再来更改… 使用git命令push文件： 1.1 git push origin master 如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建 1.2 git push origin ：refs/for/master 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin –delete master 1.3 git push origin 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 1.4 git push 如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名 1.5 git push 的其他命令 这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下： （1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push， 不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式 如果想更改设置，可以使用git config命令。git config –global push.default matching OR git config –global push.default simple；可以使用git config -l 查看配置 （2） git push –all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项 （3） git push –force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。 （4） git push origin –tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令 转自 https://www.cnblogs.com/qianqiannian/p/6008140.html]]></content>
      <categories>
        <category>Hexo||Next||主题||备份错误</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo next theme相关个性化设置]]></title>
    <url>%2F2019%2F03%2F11%2Fhexo_config%2F</url>
    <content type="text"><![CDATA[1.Hexo-Next底部logo栏更改以及注意事项 1.首先，找到 \themes\next\layout_partials\下面的footer.swig文件，打开会发现，如下图的语句： 看到划框的地方了吗？ 第一个框 是下面侧栏的“日期❤ XXX”如果想像我一样加东西，一定要在双大括号外面写。如：xxx,当然你要是想改彻底可以变量都删掉，看个人意愿。 第二个，是图一当中 “由Hexo驱动” 的Hexo链接，先给删掉防止跳转，如果想跳转当然也可以自己写地址，至于中文一会处理。注意删除的时候格式不能错，只把…标签这部分删除即可，留着两个单引号’’,否则会出错哦。 第三个框也是最后一个了，这个就是更改图一后半部分“主题-Next.XX”,这个比较爽直接将..都删掉，同样中文“主题”一会处理，删掉之后在上一行 ‘-’后面可以随意加上你想显示的东西，不要显示敏感信息哟，请自重。2.接下来，处理剩余的中文信息。找到这个地方\themes\next\languages\ 下面的语言文件zh-Hans.yml（这里以中文为例，有的习惯用英文的配置文件，道理一样，找对应位置即可）打开之后，如图： 看到了吧，这个就是传值传过去的，你想显示什么就在这里面大肆的去改动吧。其实在第二个框中，就可以把值都改掉，不用接受传值的方式，完全自己可以重写。不过我不建议那样做，因为传值这样只要是后续页面需要这几个值那么就都会通过取值去传过去，要是在刚才footer文件中直接写死，后续不一定哪个页面需要传值，但是值为空了或者还是原来的，可就尴尬了。所以还是这样改动吧。 作者：Codeagles链接：https://www.jianshu.com/p/4fbc57269f1b来源：简书 2.配置使用不蒜子计数 如果你使用的主题是NexT，那么你可以很方便的进行不蒜子的访客统计设置，仅仅只需要一步： 打开主题的配置文件/theme/next/_config.yml，找到如下配置： Show PV/UV of the website/page with busuanzi.Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: count values only if the other configs are false enable: false custom uv span for the whole site site_uv: true site_uv_header: site_uv_footer: custom pv span for the whole site site_pv: true site_pv_header: site_pv_footer: custom pv span for one page only page_pv: true page_pv_header: page_pv_footer: 将enable的值由false改为true，便可以看到页脚出现访问量，上述配置表示： site_uv表示是否显示整个网站的UV数 site_pv表示是否显示整个网站的PV数 page_pv表示是否显示每个页面的PV数当然，对于不蒜子的配置可以随意更改，一下附上本人的配置： Show PV/UV of the website/page with busuanzi.Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: count values only if the other configs are false enable: true custom uv span for the whole site site_uv: true site_uv_header: 访客数 site_uv_footer: 人 custom pv span for the whole site site_pv: true site_pv_header: 总访问量 site_pv_footer: 次 custom pv span for one page only page_pv: true page_pv_header: 阅读数 page_pv_footer: 注意事项 两种方法选择一种使用即可，都使用可能会出现无法显示的问题使用hexo s部署在本地预览效果的时候，uv数和pv数会过大，这是由于不蒜子用户使用一个存储空间，所以使用localhost:4000进行本地预览的时候会导致数字异常，这是正常现象，只需要将博客部署至云端即可恢复正常。网站运行一段时间后想要初始化访问次数，官方回答是可以注册登录自行修改阅读次数，但是我登录官网依旧显示无法注册，如果有方法可以在评论中指出。 如果无法显示数据，解决方法: 到hexo的themes文件夹下, 进入 \themes\next\layout_third-party\analytics 打开: busuanzi-counter.swig 将src=“https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js” 修改为src=“https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js” 作者：韦人人韦来源：CSDN原文：https://blog.csdn.net/ddydavie/article/details/83020549 作者：幽小鬼链接：https://www.jianshu.com/p/c311d31265e0来源：简书 3.hexo添加分类 当前博客主题用的是next最新版，最初是比较简陋的界面，一直放着没怎么动，测试了下Latex的显示效果没有达到在CSDN我的博客上的效果，就很失望，没再此地更新。 但是今年（2018）年突然发现hexo可以做出很酷的静态站点。 于是开始作为首发文章的地方。 下面开始细部的折腾，细节过程记录为文档，以供参考。 创建分类页面（page）第一步是创建分类显示界面： https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2 可以参考这个官方的链接，也可以看我摘出来的文字。 1.新建一个页面，命名为categories: hexo new page categories 之所以命名为categories的原因是在next主题的配置文件中，categories是关键词。 2.编辑新建界面，将页面类型设置为categories，主题将会在这个页面上显示所有的分类： title: categoriesdate: 2018-03-02 12:33:16type: “categories” 这个步骤很有意思，编辑新建界面是什么？当然hexo熟悉一些自然会知道，但是小萌新还是比较懵逼的。实际上调用hexo new page xxx后，会在/source/categories/目录下生成一个index.md文档，在此文档头部加上上面这段即可。实际上，index.md里只需要有这个声明即可，其他内容并不会显示出来，写了也没用。 PS. 无论是page，还是post的文章，都是以.md格式结尾，在hexo g的过程中会产生对应的.html文档，然后hexo d到Github上的也只是html文档，不是.md格式的文档。 另外就是，需要注意一点：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如： title: categoriesdate: 2018-03-02 12:33:16type: “categories”comments: false 这个暂时不是很明白，再说吧。 3.在菜单中添加链接，此时需要编辑主题的_config.yml，hexo的配置文件事先写好了，但是处于注释状态，需要去除注释即可： menu: home: / tags: /tags categories: /categories archives: /archives 内容更少些。 我从自己的配置文件中拿出来的是这样的，注意通过或链接的内容，暂时我也不是很明白用意，猜测是多一种选择吧，官方文档给出的是： menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive 6此时准备完毕，去网站上点开分类这栏，会发现没有任何分类，但是分类这栏已经是有内容的了，不再是404错误。因为还没有文章关联到分类。 添加文章分类关联第二步是为写的post文章指定分类： 上面是next主题官方给出的配置方案，而如何为文章关联分类，是hexo官方给出的。 hexo的front-matter概念 即在xxx.md上方指定文章title, date, tag等的地方。仔细想想可以明白，分类也应该指定在这个地方。 就是在文章头部指定一个categories属性即可，注意，这些属性和属性值之间必须有一个空格，否则解析错误。 示例： title: 杀死一只知更鸟观后感date: 2018-03-01 21:46:12tags:categories: 电影评论 这样不仅本篇文章上会有分类名，点击菜单栏也会显示各个分类。 作者：QUETAL来源：CSDN原文：https://blog.csdn.net/u011240016/article/details/79422462]]></content>
  </entry>
  <entry>
    <title><![CDATA[AU破解安装]]></title>
    <url>%2F2019%2F03%2F11%2Fau%2F</url>
    <content type="text"><![CDATA[本文主要介绍如何安装破解Au，Adobe软件非常强大但是收费很难受啊，学生党怎么受得了（有钱的话还是提倡使用正版授权哦）首先拿到压缩包，解压，里面有如下一些文件： 一个汉化程序、安装包、破解补丁和安装说明 1.首先断网，点击那个安装包Audition，然后自动解压，看到setup双击，选好安装的位置，记住这个路径！待会破解的时候要找到路径 2.安装完了之后不要启动au，复制那个amtlib.dll，直到刚刚那个安装au的；路径，进入文件夹里，粘贴，替换原有的dll文件 3.双击安装汉化程序，直接选和au一个文件夹就行，然后就搞定了]]></content>
      <categories>
        <category>AU||破解</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Eclipse搭建Android开发环境]]></title>
    <url>%2F2019%2F03%2F11%2Feclipse_android%2F</url>
    <content type="text"><![CDATA[虽然google的android studio很香，但是有时候我们不得不使用eclipse进行android开发，那么怎么把android开发环境集成到eclipse上呢？下面给大家介绍一下eclipse搭建android开发环境的步骤1.安装jdk 当然如果你有eclipse肯定是安装了jdk的，不然没办法打开，去官网下载jdk8，JDK官网http://www.oracle.com/technetwork/java/javase/downloads/index.htm,然后进行安装，在cmd里输入java -version 查看java版本以去确定安装成功(jdk8之后不需要配置环境变量了)2.安装eclipse Eclipse官网：http://www.eclipse.org/downloads/，下载安装3.安装Android SDK 去官网：http://developer.android.com/sdk/index.html下载,也可以下载集成了android环境的免安装eclipse，可以直接在具有java运行环境的计算机上运行4.Eclipse安装ADT插件 启动Eclipse，点击菜单Help -&gt; Install New Software …在弹出的菜单中，点击Add，输入名称，然后在URL中输入：http://dl-ssl.google.com/android/eclipse/ 之后点击Next，选择勾选ADT和NDK插件，选择安装即可，安装过程比较慢，需要耐心等待。按照提示一步一步安装完成后，会提示重启Eclipse。重启后如果发现Window菜单下没有出现AVD Manager菜单，则按照下面的方法操作：Window-&gt;Customize Perspective-&gt;Command Groups availability-&gt;Available command groups-&gt;勾选Android SDK and AVD Manager可以将Android相关的选项都勾选，这样Window菜单下就有Android SDK Manager和Android Virtual Device Manager菜单了。 5.创建一个虚拟设备（虚拟机）点击Window-&gt;Android Virtual Device Manager，在弹出的对话框中删除系统默认的一个虚拟设备，然后点击New来添加，填写相关参数新增虚拟Android设备后，点击Start…启动Android虚拟机，启动过程非常慢 6.创建一个Android项目File-&gt;New-&gt;Other，选择Android Application Project,根据提示创建即可，我创建的项目叫做AndroidTest，没有做任何修改，直接运行。 7.运行Android项目 待虚拟机启动好后，再运行Android程序，运行Android程序方法：选中项目，点击菜单Run -&gt; Run As -&gt; 1 Adnroid Application，等待自动在虚拟机中运行 转自作者：海涛zht666来源：CSDN原文：https://blog.csdn.net/zht666/article/details/29837777]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Jsp页面传递数据中文乱码]]></title>
    <url>%2F2019%2F03%2F11%2FJSP_charset-error%2F</url>
    <content type="text"><![CDATA[在做一个web端的关于数据库操作的时候，要注意驱动文件版本问题以及数据库的登录名密码和数据库管理软件的tcp||ip启用，还有防火墙的关于1433端口法则配置允许，这些是最基本的能保证连上数据库的要求。在做jsp的一次实验的时候，我发现jsp页面的表单提交的中文数据出现了&gt;乱码情况，在检查的时候发现，在jsp的文件前已经加上了&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;,声明了字符编码，在servlet里也加上了request.setCharacterEncoding(“utf-8”)，但还是乱码。最后发现表单的method用的是get，但是request.setCharacterEncoding只对post有效，于是更改为post，就好了。]]></content>
      <categories>
        <category>编码乱码</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SQLServer2008安装一直显示重启计算机]]></title>
    <url>%2F2019%2F03%2F10%2Fsqlserver2008_reboot%2F</url>
    <content type="text"><![CDATA[进入注册表编辑器，依次打开HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager，找到“PendingFileRenameOperations”值删掉，即可]]></content>
      <categories>
        <category>Sqlserver2008</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[装机检测不到硬盘和checking media]]></title>
    <url>%2F2019%2F03%2F10%2Fhard_disk%2F</url>
    <content type="text"><![CDATA[在装系统的时候其实也会遇到诸多的问题，例如无法进pe（蓝屏，详情可搜索本站wepe相关文章）、检测不到硬盘、装完系统checking media等等 本文主要是讲述如何解决这些问题，室友电脑是联系笔记本，在重装时候发现，出现checking media黑屏情况 1.更改硬盘格式 一般硬盘读不出来，主要应该是硬盘格式出现问题，不支持。所以出现这种情况可以进bios-&gt;config，将SATA Controller mode option 改成AHCI. 2.checking media 出现这个问题多数是进入的磁盘里面没有系统文件或者引导文件出现问题，我在给其装电脑时，出现这个问题，进bios后发现，boot mode默认是UEFI，UEFI是新的引导方式，在磁盘分盘格式中对应的是GUID，而MBR对应的是legacy，因为我在分盘的时候选的是MBR，所以我将boot mode改为legacy，发现还是不行，最后发现是另外一块没有系统文件的机械磁硬盘优先权大一点，在开机选项里是第一个。几番周折也没有能改变顺序，最后干脆把新加上去的固态和机械对调了位置，问题解决，成功开机。]]></content>
      <categories>
        <category>BIOS||checking meida</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[常见的linux命令]]></title>
    <url>%2F2019%2F03%2F10%2Flinux_command%2F</url>
    <content type="text"><![CDATA[罗列常见的linux命令 Linux常用命令大全（非常全！！！） 关机 (系统的关机、重启以及登出 )shutdown -h now 关闭系统(1)init 0 关闭系统(2)telinit 0 关闭系统(3)shutdown -h hours:minutes &amp; 按预定时间关闭系统shutdown -c 取消按预定时间关闭系统shutdown -r now 重启(1)reboot 重启(2)logout 注销 文件和目录cd /home 进入 ‘/ home’ 目录’cd .. 返回上一级目录cd ../.. 返回上两级目录cd 进入个人的主目录cd ~user1 进入个人的主目录cd - 返回上次所在的目录pwd 显示工作路径ls 查看目录中的文件ls -F 查看目录中的文件ls -l 显示文件和目录的详细资料ls -a 显示隐藏文件ls [0-9] 显示包含数字的文件名和目录名tree 显示文件和目录由根目录开始的树形结构(1)lstree 显示文件和目录由根目录开始的树形结构(2)mkdir dir1 创建一个叫做 ‘dir1’ 的目录’mkdir dir1 dir2 同时创建两个目录mkdir -p /tmp/dir1/dir2 创建一个目录树rm -f file1 删除一个叫做 ‘file1’ 的文件’rmdir dir1 删除一个叫做 ‘dir1’ 的目录’rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容rm -rf dir1 dir2 同时删除两个目录及它们的内容mv dir1 new_dir 重命名/移动 一个目录cp file1 file2 复制一个文件cp dir/ . 复制一个目录下的所有文件到当前工作目录cp -a /tmp/dir1 . 复制一个目录到当前工作目录cp -a dir1 dir2 复制一个目录ln -s file1 lnk1 创建一个指向文件或目录的软链接ln file1 lnk1 创建一个指向文件或目录的物理链接touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)file file1 outputs the mime type of the file as texticonv -l 列出已知的编码iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.find . -maxdepth 1 -name .jpg -print -exec convert “{}” -resize 80x60 “thumbs/{}” \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick) 文件搜索find / -name file1 从 ‘/‘ 开始进入根文件系统搜索文件和目录find / -user user1 搜索属于用户 ‘user1’ 的文件和目录find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件find / -name *.rpm -exec chmod 755 ‘{}’ \; 搜索以 ‘.rpm’ 结尾的文件并定义其权限find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令whereis halt 显示一个二进制文件、源码或man的位置which halt 显示一个二进制文件或可执行文件的完整路径 用户和群组groupadd group_name 创建一个新用户组groupdel group_name 删除一个用户组groupmod -n new_group_name old_group_name 重命名一个用户组useradd -c “Name Surname “ -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” 用户组的用户useradd user1 创建一个新用户userdel -r user1 删除一个用户 ( ‘-r’ 排除主目录)usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性passwd 修改口令passwd user1 修改一个用户的口令 (只允许root执行)chage -E 2005-12-31 user1 设置用户口令的失效期限pwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户grpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组 文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消ls -lh 显示权限ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限chown user1 file1 改变一个文件的所有人属性chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性chgrp group1 file1 改变文件的群组chown user1:group1 file1 改变一个文件的所有人和群组属性find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限chmod u-s /bin/file1 禁用一个二进制文件的 SUID位chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的chmod g-s /home/public 禁用一个目录的 SGID 位chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件chmod o-t /home/public 禁用一个目录的 STIKY 位 文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消chattr +a file1 只允许以追加方式读写文件chattr +c file1 允许这个文件能被内核自动压缩/解压chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接chattr +s file1 允许一个文件被安全地删除chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件lsattr 显示特殊的属性 打包和压缩文件bunzip2 file1.bz2 解压一个叫做 ‘file1.bz2’的文件bzip2 file1 压缩一个叫做 ‘file1’ 的文件gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件gzip file1 压缩一个叫做 ‘file1’的文件gzip -9 file1 最大程度压缩rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包rar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’rar x file1.rar 解压rar包unrar x file1.rar 解压rar包tar -cvf archive.tar file1 创建一个非压缩的 tarballtar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件tar -tf archive.tar 显示一个包中的内容tar -xvf archive.tar 释放一个包tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包tar -jxvf archive.tar.bz2 解压一个bzip2格式的压缩包tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包tar -zxvf archive.tar.gz 解压一个gzip格式的压缩包zip file1.zip file1 创建一个zip格式的压缩包zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包unzip file1.zip 解压一个zip格式压缩包 RPM 包 - （Fedora, Redhat及类似系统）rpm -ivh package.rpm 安装一个rpm包rpm -ivh –nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告rpm -U package.rpm 更新一个rpm包但不改变其配置文件rpm -F package.rpm 更新一个确定已经安装的rpm包rpm -e package_name.rpm 删除一个rpm包rpm -qa 显示系统中所有已经安装的rpm包rpm -qa | grep httpd 显示所有名称中包含 “httpd” 字样的rpm包rpm -qi package_name 获取一个已安装包的特殊信息rpm -qg “System Environment/Daemons” 显示一个组件的rpm包rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表rpm -q package_name –whatrequires 显示与一个rpm包存在依赖关系的列表rpm -q package_name –whatprovides 显示一个rpm包所占的体积rpm -q package_name –scripts 显示在安装/删除期间所执行的脚本lrpm -q package_name –changelog 显示一个rpm包的修改历史rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表rpm –import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书rpm –checksig package.rpm 确认一个rpm包的完整性rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间rpm -Va 检查系统中所有已安装的rpm包- 小心使用rpm -Vp package.rpm 确认一个rpm包还未安装rpm2cpio package.rpm | cpio –extract –make-directories bin 从一个rpm包运行可执行文件rpm -ivh /usr/src/redhat/RPMS/arch/package.rpm 从一个rpm源码安装一个构建好的包rpmbuild –rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包 YUM 软件包升级器 - （Fedora, RedHat及类似系统）yum install package_name 下载并安装一个rpm包yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系yum update package_name.rpm 更新当前系统中所有安装的rpm包yum update package_name 更新一个rpm包yum remove package_name 删除一个rpm包yum list 列出当前系统中安装的所有包yum search package_name 在rpm仓库中搜寻软件包yum clean packages 清理rpm缓存删除下载的包yum clean headers 删除所有头文件yum clean all 删除所有缓存的包和头文件 DEB 包 (Debian, Ubuntu 以及类似系统)dpkg -i package.deb 安装/更新一个 deb 包dpkg -r package_name 从系统删除一个 deb 包dpkg -l 显示系统中所有已经安装的 deb 包dpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包dpkg -s package_name 获得已经安装在系统中一个特殊包的信息dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表dpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表dpkg -S /bin/ping 确认所给的文件由哪个deb包提供 APT 软件工具 (Debian, Ubuntu 以及类似系统)apt-get install package_name 安装/更新一个 deb 包apt-cdrom install package_name 从光盘安装/更新一个 deb 包apt-get update 升级列表中的软件包apt-get upgrade 升级所有已安装的软件apt-get remove package_name 从系统删除一个deb包apt-get check 确认依赖的软件仓库正确apt-get clean 从下载的软件包中清理缓存apt-cache search searched-package 返回包含所要搜索字符串的软件包名称 查看文件内容cat file1 从第一个字节开始正向查看文件的内容tac file1 从最后一行开始反向查看一个文件的内容more file1 查看一个长文件的内容less file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作head -2 file1 查看一个文件的前两行tail -2 file1 查看一个文件的最后两行tail -f /var/log/messages 实时查看被添加到一个文件中的内容 转自：https://www.cnblogs.com/yjd_hycf_space/p/7730690.html]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[几分钟，搞定部署一个个人blog]]></title>
    <url>%2F2019%2F03%2F10%2Fcreate_blog%2F</url>
    <content type="text"><![CDATA[这篇文章来教大家部署一个属于自己的blog。首先介绍一下Hexo，1.介绍 Hexo是一个基于node.js制作的一个博客工具，而并非是一个开源的博客系统。一般hexo不需要部署在服务器上，我们用markdown来编写一个md类型的文章，再通过hexo生成对应的静态html文件，然后再上传到服务器。总之hexo是一个html生成和上传的工具。github就不多说了&gt;,我们的项目需要push上去。2.准备工作注册一个github账号，最后的域名会是username.github.io。注册好了就可以create a repository，创建一个仓库， 接下来是安装，首先安装git 可以使用$ sudo apt-get install git自动安装,也可以自己下载安装包安装。 然后安装Nodejs $ sudo apt-get install nodejs 再安装非常重要的Hexo $ sudo apt-get install npm 安装npm $ npm install -g hexo-cli 安装hexo 3.发布 创建博客 $ hexo init username.github.io 更改设置 主题安装 为了使博客不太难看，我们需要安装一个主题，切换至刚刚生成的Hexo 目录，安装主题 $ cd username.github.io $ git clone https://github.com/iissnan/hexo-theme-next themes/next这里选了一个极简的主题，也是Hexo众多主题中最受欢迎的一个。上面出现的喵神的主题 在这里。Hexo也有更多主题供你选择。 基础配置 打开文件位置username.github.io/_config.yml修改几个键值对，下面把几个必须设置的列出来按需求修改，记得保存， 还有注意配置的 键值之间一定要有空格 title: mango仓库 //你博客的名字 author: mangomj //你的名字 language: zh-Hans //语言 中文 theme: next //刚刚安装的主题名称 deploy: type: git //使用Git 发布 repo: https://github.com/username/username.github.io.git 写文章 在username.github.io/source/_posts下创建你的第一个博客,例如，创建一个名为first.md的文件 --- title: First Night --- &gt; 我有一头**小毛驴**，可是我从来都不骑。 测试 $ hexo s 测试服务启动，你可以在浏览器中输入https://localhost:4000 访问了。 安装hexo-deployer-git自动部署发布工具 $ npm install hexo-deployer-git --save 发布测试没问题后，我们就生成静态网页文件发布至我们的Github pages 中 $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 本文借鉴csdn博客作者：惟爱妮来源：CSDN原文：https://blog.csdn.net/u012907783/article/details/79229759]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2019%2F03%2F09%2Ffirst%2F</url>
    <content type="text"><![CDATA[mango仓库blog开通，blog采用hexo+nodejs完成，基于开源更改，仅作为学习娱乐，若有侵权联系mj981022@163.com.]]></content>
  </entry>
</search>
